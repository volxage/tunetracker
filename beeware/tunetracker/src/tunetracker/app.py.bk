"""
My first application
"""
from types import NoneType
from typing import Any
import toga
from toga.sources.list_source import ListSource, Row
from toga.style import Pack
from toga.style.pack import COLUMN, HIDDEN, ROW, VISIBLE

import json
import csv

from fuzzywuzzy import fuzz

from pathlib import Path


class TuneTracker(toga.App):

    def startup(self):
        self.default_tune = {
                    "title" : "unknown",
                    "alternative_title" : "unknown",
                    "composers" : [],
                    "form" : "unknown",
                    "notable_recordings" : [],
                    "keys" : [],
                    "styles" : [],
                    "tempi" : [],
                    "contrafacts" : [],
                    "playthroughs" : 0,
                    "form_confidence" : -1,
                    "melody_confidence" : -1,
                    "solo_confidence" : -1,
                    "lyrics_confidence" : -1,
                    "played_at" : [],
                    }
        """
        Construct and show the Toga application.

        Usually, you would add your application to a main content box.
        We then create a main window (with a name matching the app), and
        show the main window.
        """
        self.open_files()

        self.prepare_tunelist()
        self.init_dlist()
        self.dl_data = self.dlist.data
        self.sl_box = toga.Box()
        self.tune_view = toga.ScrollContainer(style=Pack(padding=80))
        self.tune_view_contents = toga.Box(style=Pack(direction=COLUMN))
        self.current_tune = {}
        self.tune_view_contents.add(toga.Label("*: List format supported. Separate with a comma and space."))
        for key, val in self.default_tune.items():
            if key != "icon" and key != "subtitle":
                title = key.title()
                title = title.replace("_", " ")
                if type(val) == list:
                    l = toga.Label("*"+title, id=key+"_label")
                else:
                    l = toga.Label(title, id=key+"_label")
                self.tune_view_contents.add(l)
                if type(val) == int:
                    i = toga.NumberInput(id=key+"_ninput")
                else:
                    i = toga.TextInput(id=key+"_tinput")
                self.tune_view_contents.add(i)
        bottom_box = toga.Box(style=Pack(direction=ROW))
        bottom_box.add(toga.Button("Confirm edits", "confirm_btn", on_press=self.switch_to_tunelist))
        bottom_box.add(toga.Button("Cancel edits", "cancel_btn", on_press=self.switch_to_tunelist))
        self.tune_view_contents.add(bottom_box)
        
        self.sl_data = []
        self.sort_standards()
        self.prepare_standards()
        self.tune_view.content = self.tune_view_contents
        self.standards_list = toga.DetailedList(data=self.sl_data, style=Pack(width=400, height=400))
        self.sl_box.add(self.standards_list)
        bottom_box = toga.Box(style=Pack(direction=ROW))
        bottom_box.add(toga.Button("Import standard", "import_confirm_btn", on_press=self.import_standard))
        bottom_box.add(toga.Button("Cancel import", "import_cancel_btn", on_press=self.switch_to_tunelist))
        self.sl_box.add(bottom_box)

        self.main_window = toga.MainWindow(title=self.formal_name)
        self.main_window : toga.MainWindow
        self.main_window.content = self.main_box
        self.main_window.show()
        return self.main_window
    
    

        
    def init_dlist(self, sort_key="title", search=""):
        self.main_box = toga.Box(style=Pack(direction=COLUMN))
        self.dlist = toga.DetailedList(style=Pack(width=400, height=400), data=self.dl_data, on_select=self.__dlist_selection_handler__) #Size is explicit because of quirk of toga
        self.prepare_tunelist()
        self.sort_tunelist(sort_key, search)
        obj_list = [
            toga.TextInput(id="search_input", placeholder="Search", on_change=self.__search_handler__),
            self.dlist,
            toga.Button("Edit Tune", on_press=self.__edit_handler__),
            toga.Button("Import tune from JazzStandards.com", on_press=self.switch_to_standards),
            toga.Button("Add Empty Tune", on_press=self.new_tune),
            toga.Button("Delete Tune (Permenant!)", on_press=self.delete_selected),
        ]
        for obj in obj_list:
            self.main_box.add(obj)
    def update_editor_contents(self, tune):
        content = self.tune_view_contents
        for child in content.children:
            if child.id.endswith("input"):
                if child.id.endswith("_tinput"):
                    key = child.id.removesuffix("_tinput")
                    try:
                        val = tune[key]
                        if type(val) == list:
                            val = ", ".join(val)
                        child.value = val
                    except:
                        child.value = ""
                else:
                    key = child.id.removesuffix("_ninput")
                    try:
                        child.value = tune[key]
                    except:
                        child.value = -1
                
    def prepare_tunelist(self):
        self.dl_data = []
#         self.dl_data.clear()
#         for tune in self.tunelist:
#             d = {}
#             
#             if "title" in tune:
#                 d["title"] = tune["title"]
#             else:
#                 d["title"] = "(No title supplied!)"
#             if "composers" in tune:
#                 d["subtitle"] = ", ".join(tune["composers"])
#             else:
#                 d["subtitle"] = "(No " + "composers" + " supplied!)"
#             d["icon"] = toga.icons.Icon.TOGA_ICON
#             d["tune"] = tune
        for tune in self.tunelist:
            d = self._create_row_dict(tune, "composers")
            self.dl_data.append(d)
#             self.dl_data.append(d)

    def sort_standards(self, sort_key = "Title", search=""):
        self.all_standards.sort(key = lambda st: st[sort_key])
    def sort_tunelist(self, sort_key = "title",  search=""):
        if search == "":
            self.tunelist.sort(key = lambda tn: tn[sort_key])
        else:
            self.tunelist.sort(key = lambda tn: fuzz.partial_ratio(search, tn[sort_key]), reverse=True)
    def prepare_standards(self, subtitle_key="Title"):
        self.sl_data.clear()
        for standard in self.all_standards:
            row = {}
            row["title"] = standard["Title"]
            row["subtitle"] = standard["Composer(s)"]
            row["icon"] = toga.icons.Icon.DEFAULT_ICON
            row["standard"] = standard
            self.sl_data.append(row)
    def import_standard(self, widget):
        standard = getattr(self.standards_list.selection, "standard")
        tune = self.convert_std_to_tune(standard)
        self.update_editor_contents(tune)
        self.switch_to_editor(None)
        
        self.current_row = self.new_tune(None)
        self.current_tune = getattr(self.current_row, "tune")

    def new_tune(self, widget):
        new_tune = {}
        self.tunelist.append(new_tune)
        new_row = self.dlist.data.prepend(title="New Tune", subtitle="New Tune Composer(s)", tune=new_tune, icon=toga.icons.Icon.DEFAULT_ICON)
        if type(widget) == toga.Button:
            self.dlist.scroll_to_top()
        return new_row
    def __dlist_selection_handler__(self, widget, row):
        #Need to ignore some strange selection cases
        if type(row) != NoneType:
            self.current_row = row
            self.current_tune = getattr(row, "tune")
    def convert_std_to_tune(self, std):
        tune_conversion = {}
        tune_conversion["title"] = std["Title"]
        tune_conversion["composers"] = std["Composer(s)"]
        return tune_conversion
    def update_tune(self):
        content = self.tune_view_contents
        for child in content.children:
            if child.id.endswith("input"):
                key = child.id.removesuffix("_tinput")
                key = key.removesuffix("_ninput")
                val = child.value
                if val != "" and val != "unknown" and val != "-1":
                    if type(self.default_tune[key]) == list:
                        self.current_tune[key] = val.split(", ")
                    elif type(self.default_tune[key]) == int:
                        self.current_tune[key] = int(val)
                    else:
                        self.current_tune[key] = val
                    if val == "title":
                        setattr(self.current_row, "title", self.current_tune["title"])
                    if val == "composers":
                        setattr(self.current_row, "subtitle", self.current_tune["composers"])
        if "title" not in self.current_tune:
            setattr(self.current_row, "title", "(No title supplied!)")
        else:
            setattr(self.current_row, "title", self.current_tune["title"])
        if "composers" not in self.current_tune:
            setattr(self.current_row, "subtitle", "(No subtitle supplied!)")
        else:
            setattr(self.current_row, "subtitle", ", ".join(self.current_tune["composers"]))
        self.save()
    def delete_selected(self, widget):
        row = self.dlist.selection
        print("Deleting " + str(self.tunelist.remove(getattr(row, "tune"))))
        self.dlist.data.remove(row)
        self.save()
    def __search_handler__(self, widget):
        print("Searching " + widget.value)
        self.sort_tunelist("title", widget.value)
        self.dlist.data.clear()
        for tune in self.tunelist:
            pass
    def _create_row_dict(self, tune, subtitle_key):
        if "title" in tune:
            title = tune["title"]
        else:
            title = "(No title supplied!)"
        if subtitle_key in tune:
            subtitle = ", ".join(tune["composers"])
        else:
            subtitle = "(No " + subtitle_key + " supplied!)"
        return {"title": title,
               "subtitle": subtitle,
               "tune": tune,
               "icon": toga.icons.Icon.TOGA_ICON,
               } 
    def __edit_handler__(self, widget):
        self.switch_to_editor(None)
        self.update_editor_contents(self.current_tune)
    def switch_to_editor(self, widget):
        self.main_window.content = self.tune_view
    def switch_to_tunelist(self, widget):
        if widget.id == "confirm_btn":
            self.update_tune()
        self.main_window.content = self.main_box
    def switch_to_standards(self, widget):
        self.main_window.content = self.sl_box
    def open_files(self):
        src = Path(__file__).resolve()
        src_dir = src.parent
        with open(src_dir / "songs.json", "r+") as f:
            self.tunelist = json.load(f)
            self.tunelist: list[dict]
        with open(src_dir / "JazzStandards.csv", "r") as standards_file:
            self.all_standards = sorted(list(csv.DictReader(standards_file)), key=lambda tn: tn["Title"])
    def save(self):
        print("Save disabled")
#         try:
#             src = Path(__file__).resolve()
#             src_dir = src.parent
#             with open(src_dir / "songs.json", "w") as f:
#                 json.dump(self.tunelist, f)
#                 print("Wrote to ./songs.json")
#         except:
#             print("Write failed")

#         print(self.tunelist)


class TunelistSource(ListSource):
    def __init__(self, accessors: list[str], data: list[Any] | None = None):
        super().__init__(accessors, data)
        self.subtitle_key = "composers"
    def _create_row(self, data:Any):
        #Transform TUNE (with name data) into data, then continue with original function
        if "title" in data:
            title = data["title"]
        else:
            title = "(No title supplied!)"
        if self.subtitle_key in data:
            subtitle = ", ".join(data["composers"])
        else:
            subtitle = "(No " + self.subtitle_key + " supplied!)"
        data = {"title": title,
               "subtitle": subtitle,
               "tune": data,
               "icon": toga.icons.Icon.TOGA_ICON,
               } 
        super()._create_row(data)



def main():
    return TuneTracker()


